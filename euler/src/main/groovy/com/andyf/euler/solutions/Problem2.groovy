package com.andyf.euler.solutions

/**
 * A script to solve Project Euler problem 2:
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:

    1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     find the sum of the even-valued terms.
 */

// As it turns out, to make a recursive closure, I have to
// predefine the closure name.
def fib
fib = { i ->
    if (i <= 0) {
        return 0
    } else if (i <= 2) {
        return 1
    } else {
        return fib(i-1) + fib(i-2)
    }
}

// Memoize the call to fib().  We'll be calling fib() many
// many times for some arguments.  Fortunately, memoization
// is built into Groovy closures.
def memoizedFib = fib.memoize()

def MAX = 4000000

def sumEvenFibUntil = { max, incr ->
    def term = 0
    def i = 0
    def sum = 0
    
    // Get the first fib term
    term = memoizedFib(i)
    i += incr
    
    // If the most-recently calculated term isn't above
    // the max, then add it to the sum if it's even, and
    // then calculate the next one
    while (term < max) {
        if (term % 2 == 0) {
            sum += term
        }
        term = memoizedFib(i)
        i += incr
    }
    return sum
}

def sum = sumEvenFibUntil(MAX, 1)

println "Sum of even-valued Fibonacci terms <4,000,000: $sum"

// The canonical solution made a couple of pretty good points.
// Let's experiment with one..

// Point 1: Every third Fibonacci number is even.
// Corollary: I should be able to skip the other Fibonacci numbers,
// and still get the same answer as before.
def skipSum = sumEvenFibUntil(MAX, 3)
assert skipSum == sum